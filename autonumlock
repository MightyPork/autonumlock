#!/bin/bash

VERSION="1.2.0"
CONFIG_FILE="$HOME/.autonumlock"
CONFIG_FILE_SRC='/usr/share/autonumlock/default_config'

######## COLORS #########
# Reset
Reset='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[0;105m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

###################

function heading() {
	echo -e $BICyan"$1"$Reset
}

function error() {
	echo
	echo -ne $White$On_Red;	echo -n " $@ " | sed -e "s/./ /g"; echo -e $Reset
	echo -e $White$On_Red" $1 "$Reset
	echo -ne $White$On_Red;	echo -n " $@ " | sed -e "s/./ /g"; echo -e $Reset
	echo
}


echo
heading "AutoNumlock v."$VERSION
echo


if [[ $1 == "-v" ]]; then
	echo "(c) 2014-2016 Ondřej Hruška <ondra@ondrovo.com>"
	echo
	echo "https://github.com/MightyPork/autonumlock"
	echo "MIT License"
	echo

	exit
fi


if [[ $1 == "-l" ]]; then
	find_cmd="lsusb | grep -i keyboard | grep -Po 'ID.*'"

	for dev in /sys/bus/usb/devices/*-*:*
	do
		if [ -f $dev/bInterfaceClass ]; then
			if [[ "$(cat $dev/bInterfaceClass)" == "03" && "$(cat $dev/bInterfaceProtocol)" == "01" ]]; then
				echo -e "${BIWhite}=== USB keyboard found ===$Reset"
				modalias=$(cat "$dev/modalias")

				regex="usb:v(....)p(....)"
				[[ $modalias =~ $regex ]]
    			vendor="${BASH_REMATCH[1]}"
    			product="${BASH_REMATCH[2]}"

    			dev_id="$vendor:$product"

    			echo -e "ID:   $IGreen"$(echo $dev_id | tr '[:upper:]' '[:lower:]')$Reset
				echo -n "Name: "
    			lsusb | grep -oiP "ID $dev_id \K(.*)"

    			echo
			fi
		fi
	done

	exit
fi


if [[ $1 == "-h" ]]; then
	echo "Monitors devices & enables numlock when USB keyboard is connected."
	echo "Intended for laptops without a numeric block."
	echo
	echo "Usage:"
	echo
	echo -e "${IWhite}$IYellow$(basename $0) [-h|-v|-l] [<device>] [<interval>]$Reset"
	echo "    <device> ...... device ID of your external keyboard (obtained with lsusb)"
	echo "    <interval> .... number of seconds between checking (default: 1)"
	echo "    -h ... help"
	echo "    -v ... version"
	echo "    -l ... try to find USB keyboards"
	echo
	echo "After first successful start (with device id), a config file is created:"
	echo -e "  $IGreen"$CONFIG_FILE$Reset
	echo
	echo "The settings are then taken from the config file."
	echo "You can also configure multiple keyboards there,"
	echo "and change the connect/disconnect commands."
	echo
	exit
fi

if [[ -e $CONFIG_FILE ]]; then
	source $CONFIG_FILE

	[ -z "$1" ] || devices=($1)
	[ -z "$2" ] || sleeptime=$2

	echo -e $IGreen"Loaded config file from ~/.autonumlock."$Reset

else
	if [ -z $1 ]; then
		error "Missing device ID, and no config file found. Use -h for help."
		exit 1
	fi

	devices=($1)
	sleeptime=1

	[ -z "$2" ] || sleeptime=$2

	# create the config file
	devq=$(printf '%q' $1)
	sleepq=$(printf '%q' $sleeptime)

	echo -e $IGreen"Creating config file in ~/.autonumlock for device \"$devq\", interval $sleepq seconds."$Reset

	cat "$CONFIG_FILE_SRC" | sed "s/<DEVICE>/$devq/g" | sed "s/<SLEEP>/$sleepq/g" > "$CONFIG_FILE"

	source $CONFIG_FILE
fi



# prepare the test command

command="lsusb | grep -i"

for item in ${devices[*]}; do
	command=$command" -e \"$item\""
done




# Show the config

echo
echo -e "Configured keyboards:\n";
for item in ${devices[*]}
do
    printf " - \"%s\"\n" $item
done
echo
echo "Interval: "$sleeptime" s"
echo
echo "Test cmd: $command"

echo
echo -e "${BIGreen}Loop running...$Reset"
echo

# main loop

last_state=-1
while [ 1 ]; do

	finds=$(eval $command);

	if [[ -z $finds ]]; then

		if [[ $last_state != 0 ]]; then
			echo -e "External keyboard ${IRed}DISCONNECTED$Reset."

			on_disconnect

			last_state=0
		fi

	else

		if [[ $last_state != 1 ]]; then
			echo -e "External keyboard ${IGreen}CONNECTED$Reset."

			on_connect

			last_state=1
		fi
	fi

	sleep $sleeptime

done;
